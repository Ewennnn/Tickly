services:
  frontend:
    build:
      context: ./tickly-front
    container_name: frontend
    restart: always
    ports:
      - "4000:4000"
    networks:
      - frontend

  load-balancer:
    image: nginx:latest
    container_name: load-balancer
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
    depends_on:
      - api-gateway-1
      - api-gateway-2

  # Service RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'  # Broker
      - '15672:15672' # Interface web
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 30s
    networks:
      - rabbitmq

  # Base de données globale aux services
  # En conditions réelles, il existe deux solutions
  # 1 - Une base de données centralisée avec réplication + sharding qui permet d'avoir un schéma de données avec des relations
  # 2 - Une base de données par service qui isole complètement chaque partie métier de l'application. Il n'y a pas de schéma de données centralisé
  # Dans le cadre de ce projet, il n'y a qu'une seule base de données pour des raisons de performances.
  # Chaque service manipule son propre schéma au sein de la base de données pour simuler le second scénario présenté ci-dessus.
  services-database:
    image: postgres:17.4
    container_name: services-database
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: public
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d public" ]
      interval: 5s
      timeout: 30s
    networks:
      - database

  # Interface web de gestion de base de données
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      services-database:
        condition: service_healthy
    networks:
      - database
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json

  # Gateway
  api-gateway-1:
    build:
      context: ./apps/api-gateway
    container_name: api-gateway-1
    environment:
      RABBITMQ_URL: amqp://rabbitmq
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - frontend
      - rabbitmq
      - services

  api-gateway-2:
    build:
      context: ./apps/api-gateway
    container_name: api-gateway-2
    environment:
      RABBITMQ_URL: amqp://rabbitmq
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - frontend
      - rabbitmq
      - services

  # Service utilisateurs
  user-service:
    build:
      context: ./apps/user-service
    container_name: user-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq
      DATABASE_URL: postgresql://root:root@services-database:5432/public
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      services-database:
        condition: service_healthy
        restart: true
    networks:
      - services
      - database
      - rabbitmq

  # Service d'authentification
  auth-service:
    build:
      context: /apps/auth-service
    container_name: auth-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq
      DATABASE_URL: postgresql://root:root@services-database:5432/public
      JWT_SECRET: "compose_jwt_secret"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      services-database:
        condition: service_healthy
        restart: true
    networks:
      - services
      - database
      - rabbitmq

  # Service d'authentification
  notification-service:
    build:
      context: /apps/notification-service
    container_name: notification-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq
      EMAIL_PASSWORD: umvh lzib obuu zjoz
      EMAIL_SENDER: ewennn.zencraft@gmail.com
      EMAIL_SENDER_NAME: Tickly
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - rabbitmq
      - services

  # Service d'évènements
  events-service:
    build:
      context: /apps/events-service
    container_name: events-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq
      DATABASE_URL: postgresql://root:root@services-database:5432/public
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      services-database:
        condition: service_healthy
        restart: true
    networks:
      - services
      - database
      - rabbitmq

  # Service de tickets
  tickets-service:
    build:
      context: /apps/tickets-service
    container_name: tickets-service
    environment:
      RABBITMQ_URL: amqp://rabbitmq
      DATABASE_URL: postgresql://root:root@services-database:5432/public
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      services-database:
        condition: service_healthy
        restart: true
    networks:
      - services
      - database
      - rabbitmq


networks:
  frontend:
    driver: bridge
  services:
    driver: bridge
  rabbitmq:
    driver: bridge
  database:
    driver: bridge